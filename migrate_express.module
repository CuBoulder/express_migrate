<?php

function migrate_object_to_array($arg1) {

  return (array) $arg1;


}

function ensure_array($arg1) {
  if (isset($arg1[0]))
  {
    return $arg1;
  }
  else
  {
    $x = [];
    $x[0] = $arg1;
    return $x;
  }
}


function array_depth($array) {
  $max_indentation = 1;

  $array_str = print_r($array, true);
  $lines = explode("\n", $array_str);

  foreach ($lines as $line) {
    $indentation = (strlen($line) - strlen(ltrim($line))) / 4;

    if ($indentation > $max_indentation) {
      $max_indentation = $indentation;
    }
  }

  return ceil(($max_indentation - 1) / 2) + 1;
}

function unwrap_array($arg1)
{
  $ret = $arg1;
  file_put_contents('/tmp/drupaldebug.txt', "---array start---\n", FILE_APPEND | LOCK_EX);
  file_put_contents('/tmp/drupaldebug.txt', print_r($ret, true) . "\n", FILE_APPEND | LOCK_EX);
  file_put_contents('/tmp/drupaldebug.txt', "---array end---\n", FILE_APPEND | LOCK_EX);

  return $ret;
}

function multifix($arg1) {


  print('>>>');
  $a = (array) $arg1;
  $b = [];
  $b[] = (array) $a['item'];

  $c = [];
  $c[] = $b;

  print_r($c);

  print('<<<');
  return $c;



  $data = (array) $arg1;
  if (isset($data['item'][0]))
  {
    $x = [];
    foreach ($data['item'] as $value)
    {
      $x[] = (array)$value;
    }
    #print_r($x, true);
    $y = [];

    return $x;
  }
  else
  {

  }


}
